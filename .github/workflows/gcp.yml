name: GCP CI/CD Pipeline

on:
  push:
    branches: [ "main" ]


env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  SERVICE_ACCOUNT_KEY: ${{ secrets.SERVICE_ACCOUNT_KEY }}
  CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
  REGION: ${{ secrets.GKE_REGION }}
  REGISTRY_NAME: blogs-analyzer
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  GOOGLE_GEMINI_API_KEY: ${{ secrets.GOOGLE_GEMINI_API_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up JDK for Java projects
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      # Set up Node.js for Angular projects
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21'

      # Build Java and Angular projects
      - name: Build Projects
        run: |
          SERVICE_NAMES=$(cat projects-changes-deploy.txt)
          echo "Service Names: $SERVICE_NAMES"
          for SERVICE_NAME in $(echo $SERVICE_NAMES | tr ',' ' '); do
            echo "Building $SERVICE_NAME"
            if [ -d "$SERVICE_NAME" ]; then
              cd $SERVICE_NAME
              if [ "$SERVICE_NAME" == "blogs-analyzer-ui" ]; then
                npm install && npm test && npm install -g sonarqube-scanner && npm run sonar
              else
                mvn clean install -Psonar -B -V
              fi
              cd ..
            fi
          done

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ env.GKE_PROJECT }}
          service_account_key: ${{ env.SERVICE_ACCOUNT_KEY }}

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v0.5.0
        with:
          credentials_json: ${{ env.SERVICE_ACCOUNT_KEY }}

      - name: Configure Docker for Google Container Registry
        run: gcloud auth configure-docker

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      # Setup for Java projects
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build and Push Docker Images
        run: |
          COMMIT_SHA=$(git rev-parse --short HEAD)
          SERVICE_NAMES=$(cat projects-changes-deploy.txt)
          echo "Service Names: $SERVICE_NAMES"
          for SERVICE_NAME in $(echo $SERVICE_NAMES | tr ',' ' '); do
            echo "Building and pushing Docker image for $SERVICE_NAME"
            if [ -d "$SERVICE_NAME" ]; then
              cd $SERVICE_NAME
              if [ "$SERVICE_NAME" != "blogs-analyzer-ui" ]; then
                mvn clean install -DskipTests
              fi
              IMAGE_NAME=gcr.io/gen-lang-client-0999974873/$SERVICE_NAME:$COMMIT_SHA
              docker build -t $IMAGE_NAME .
              docker push $IMAGE_NAME
              cd ..
            fi
          done

      - name: Deploy to GKE
        run: |
          echo "Getting credentials for cluster $CLUSTER_NAME in zone $REGION"
          gcloud container clusters get-credentials $CLUSTER_NAME --region $REGION --project $PROJECT_ID
          COMMIT_SHA=$(git rev-parse --short HEAD)
          SERVICE_NAMES=$(cat projects-changes-deploy.txt)
          echo "Service Names: $SERVICE_NAMES"
          for SERVICE_NAME in $(echo $SERVICE_NAMES | tr ',' ' '); do
            echo "Deploying $SERVICE_NAME to GKE"
           if [ -d "$SERVICE_NAME/k8s" ]; then
              sed -i "s|gcr.io/gen-lang-client-0999974873/$SERVICE_NAME:latest|gcr.io/gen-lang-client-0999974873/$SERVICE_NAME:$COMMIT_SHA|g" $SERVICE_NAME/k8s/deployment.yaml
              kubectl apply -f $SERVICE_NAME/k8s/
            fi
          done
